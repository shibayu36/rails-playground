# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users/:username/entries', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Entry. As you add validations to Entry, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    let!(:user) { create(:user) }
    let!(:diary) { create(:diary, user:) }
    let!(:entry1) { create(:entry, diary:) }
    let!(:entry2) { create(:entry, diary:) }

    let!(:other_entry) { create(:entry) }

    it 'renders a successful response' do
      get entries_url(username: user.name)
      expect(response).to be_successful
      expect(response.body).to include(entry1.title)
      expect(response.body).to include(entry2.title)
      expect(response.body).not_to include(other_entry.title)
    end
  end

  describe 'GET /show' do
    let!(:user) { create(:user) }
    let!(:diary) { create(:diary, user:) }
    let!(:entry1) { create(:entry, diary:) }
    let!(:entry2) { create(:entry, diary:) }

    it 'renders the specified entry content' do
      get entry_url(username: user.name, id: entry1.id)
      expect(response).to be_successful
      expect(response.body).to include(entry1.title)
      expect(response.body).not_to include(entry2.title)
    end

    context 'when an user is not found' do
      it 'returns 404' do
        get entry_url(username: 'not_found_name', id: entry1.id)
        expect(response).to have_http_status(:not_found)
      end
    end

    context 'when a diary of the user is not found' do
      let(:no_diary_user) { create(:user) }

      it 'returns 404' do
        get entry_url(username: no_diary_user.name, id: entry1.id)
        expect(response).to have_http_status(:not_found)
      end
    end

    context 'when an entry does not belong to the diary' do
      let(:other_entry) { create(:entry) }

      it 'returns 404' do
        get entry_url(username: user.name, id: other_entry.id)
        expect(response).to have_http_status(:not_found)
      end
    end
  end

  describe 'GET /new' do
    let!(:user) { create(:user) }

    before do
      create(:diary, user:)
    end

    it 'renders a successful response' do
      get new_entry_url(username: user.name)
      expect(response).to be_successful
    end
  end

  xdescribe 'GET /edit' do
    it 'renders a successful response' do
      entry = Entry.create! valid_attributes
      get edit_entry_url(entry)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    let(:diary) { create(:diary) }

    context 'with valid parameters' do
      let(:entry_params) { { title: 'title1', body: 'body1' } }

      it 'creates a new Entry, and redirects to the entry url' do
        post entries_url(diary.user.name), params: { entry: entry_params }

        expect(diary.entries.count).to eq 1
        expect(diary.entries.first).to have_attributes({ title: 'title1', body: 'body1' })

        expect(response).to redirect_to(entry_url(diary.user.name, diary.entries.last))
      end
    end

    context 'with invalid parameters' do
      let(:entry_params) { { title: 't' * 101, body: 'body1' } }

      it 'does not create a new entry, and shows error message' do
        post entries_url(diary.user.name), params: { entry: entry_params }

        expect(diary.entries.count).to eq 0

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to include('Title is too long (maximum is 100 characters)')
      end
    end
  end

  describe 'PATCH /update' do
    let!(:user) { create(:user) }
    let!(:diary) { create(:diary, user:) }
    let!(:entry) { create(:entry, diary:) }

    context 'with valid parameters' do
      let(:entry_params) { { title: 'updated title', body: 'updated body' } }

      it 'updates the requested entry, and redirects to the entry url' do
        patch entry_url(username: user.name, id: entry.id), params: { entry: entry_params }

        expect(entry.reload).to have_attributes({ title: 'updated title', body: 'updated body' })

        expect(response).to redirect_to(entry_url(user.name, entry))
      end
    end

    context 'with invalid parameters' do
      let(:entry_params) { { title: 't' * 101, body: 'body2' } }

      it 'does not update the requested entry, and shows error message' do
        patch entry_url(username: user.name, id: entry.id), params: { entry: entry_params }

        expect(entry.reload).not_to have_attributes({ title: 'title2', body: 'body2' })

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to include('Title is too long (maximum is 100 characters)')
      end
    end

    context 'when an user is not found' do
      it 'returns 404' do
        patch entry_url(username: 'not_found_name', id: entry.id)
        expect(response).to have_http_status(:not_found)
      end
    end

    context 'when an entry does not belong to the diary' do
      let(:other_entry) { create(:entry) }

      it 'returns 404' do
        patch entry_url(username: user.name, id: other_entry.id)
        expect(response).to have_http_status(:not_found)
      end
    end
  end

  xdescribe 'DELETE /destroy' do
    it 'destroys the requested entry' do
      entry = Entry.create! valid_attributes
      expect do
        delete entry_url(entry)
      end.to change(Entry, :count).by(-1)
    end

    it 'redirects to the entries list' do
      entry = Entry.create! valid_attributes
      delete entry_url(entry)
      expect(response).to redirect_to(entries_url)
    end
  end
end
